// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  UpdateUserArchiveStatusData,
  UpdateUserArchiveStatusResponse,
  GetAllUsersData,
  GetAllUsersResponse,
  UpdateUserData,
  UpdateUserResponse,
  AddUserData,
  AddUserResponse,
  ChangeAvatar3Data,
  ChangeAvatar3Response,
  VerifyUserData,
  VerifyUserResponse,
  VerifyOtpData,
  VerifyOtpResponse,
  SetPasswordData,
  SetPasswordResponse,
  ResendOtpData,
  ResendOtpResponse,
  LogoutData,
  LogoutResponse,
  GetAccessTokenData,
  GetAccessTokenResponse,
  ChangePasswordData,
  ChangePasswordResponse,
  GetAccessTokenFromRefreshTokenData,
  GetAccessTokenFromRefreshTokenResponse,
  GetUserData,
  GetUserResponse,
  GetProfile1Data,
  GetProfile1Response,
  GetAllRolesData,
  GetAllRolesResponse,
  UpdateRoleData,
  UpdateRoleResponse,
  AddRoleData,
  AddRoleResponse,
  GetAllPrivilegesData,
  GetAllPrivilegesResponse,
  GetAllProvidersData,
  GetAllProvidersResponse,
  UpdateProviderData,
  UpdateProviderResponse,
  CreateProviderData,
  CreateProviderResponse,
  UpdateProviderArchiveStatusData,
  UpdateProviderArchiveStatusResponse,
  UploadVideoData,
  UploadVideoResponse,
  ChangeAvatarData,
  ChangeAvatarResponse,
  GetProviderByIdData,
  GetProviderByIdResponse,
  GetProfileData,
  GetProfileResponse,
  DeleteVideoData,
  DeleteVideoResponse,
  GetAllProviderGroupsData,
  GetAllProviderGroupsResponse,
  UpdateProviderGroupData,
  UpdateProviderGroupResponse,
  CreateProviderGroupData,
  CreateProviderGroupResponse,
  SyncDatabaseSchemaData,
  SyncDatabaseSchemaResponse,
  UpdateProviderGroupArchiveStatusData,
  UpdateProviderGroupArchiveStatusResponse,
  ChangeAvatar1Data,
  ChangeAvatar1Response,
  GetProviderGroupByIdData,
  GetProviderGroupByIdResponse,
  GetAllPatientData,
  GetAllPatientResponse,
  UpdatePatientData,
  UpdatePatientResponse,
  CreatePatientData,
  CreatePatientResponse,
  UpdatePatientArchiveStatusData,
  UpdatePatientArchiveStatusResponse,
  ChangeAvatar2Data,
  ChangeAvatar2Response,
  UploadFileData,
  UploadFileResponse,
  GetPatientByIdData,
  GetPatientByIdResponse,
  GetProfile2Data,
  GetProfile2Response,
  DownloadTemplateData,
  DownloadTemplateResponse,
  GetPatientVitals1Data,
  GetPatientVitals1Response,
  UpdatePatientVitalData,
  UpdatePatientVitalResponse,
  CreatePatientVitalData,
  CreatePatientVitalResponse,
  CreateListPatientVitalData,
  CreateListPatientVitalResponse,
  GetPatientVitalByIdData,
  GetPatientVitalByIdResponse,
  GetPatientLatestVitalsData,
  GetPatientLatestVitalsResponse,
  GetPatientMedicationData,
  GetPatientMedicationResponse,
  UpdatePatientMedicationData,
  UpdatePatientMedicationResponse,
  CreatePatientMedicationData,
  CreatePatientMedicationResponse,
  DeletePatientMedicationIdData,
  DeletePatientMedicationIdResponse,
  GetPatientMedicationByIdData,
  GetPatientMedicationByIdResponse,
  UpdatePatientConsentStatusData,
  UpdatePatientConsentStatusResponse,
  GetAllConsentFormTemplateData,
  GetAllConsentFormTemplateResponse,
  UpdateConsentFormsData,
  UpdateConsentFormsResponse,
  CreateConsentFormsData,
  CreateConsentFormsResponse,
  UpdateConsentFormArchiveStatusData,
  UpdateConsentFormArchiveStatusResponse,
  GetAllPatientConsentFormData,
  GetAllPatientConsentFormResponse,
  AddPatientConsentData,
  AddPatientConsentResponse,
  GetPatientConsentFormByIdData,
  GetPatientConsentFormByIdResponse,
  GetConsentFormIdData,
  GetConsentFormIdResponse,
  GetPatientAllergyData,
  GetPatientAllergyResponse,
  UpdatePatientAllergyData,
  UpdatePatientAllergyResponse,
  CreatePatientAllergyData,
  CreatePatientAllergyResponse,
  UpdatePatientAllergyArchiveStatusData,
  UpdatePatientAllergyArchiveStatusResponse,
  GetPatientAllergyByIdData,
  GetPatientAllergyByIdResponse,
  GetMedicalCodesData,
  GetMedicalCodesResponse,
  UpdateMedicalCodeData,
  UpdateMedicalCodeResponse,
  CreateMedicalCodeData,
  CreateMedicalCodeResponse,
  UpdateMedicalCodeStatusData,
  UpdateMedicalCodeStatusResponse,
  UpdateMedicalCodeArchiveStatusData,
  UpdateMedicalCodeArchiveStatusResponse,
  GetMedicalCodeByIdData,
  GetMedicalCodeByIdResponse,
  GetAllLocationsData,
  GetAllLocationsResponse,
  UpdateLocationData,
  UpdateLocationResponse,
  CreateLocationData,
  CreateLocationResponse,
  UpdateLocationArchiveStatusData,
  UpdateLocationArchiveStatusResponse,
  GetLocationByIdData,
  GetLocationByIdResponse,
  SetProviderAvailabilitySettingData,
  SetProviderAvailabilitySettingResponse,
  GetProviderAvailabilitySettingData,
  GetProviderAvailabilitySettingResponse,
  GetPatientVitalsData,
  GetPatientVitalsResponse,
  GetAllLicensedStatesData,
  GetAllLicensedStatesResponse,
  GetPractitionerByProviderIdData,
  GetPractitionerByProviderIdResponse,
  GetOrganizationByPracticeIdData,
  GetOrganizationByPracticeIdResponse,
  GetLocationByLocationIdData,
  GetLocationByLocationIdResponse,
  GetAccessToken1Data,
  GetAccessToken1Response,
} from "./types.gen";

export class UserControllerService {
  /**
   * Archive/Unarchive User
   * Change User archive status to either archived or unarchived.
   * @param data The data for the request.
   * @param data.userId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateUserArchiveStatus(
    data: UpdateUserArchiveStatusData,
  ): CancelablePromise<UpdateUserArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/{userId}/archive-status/{status}",
      path: {
        userId: data.userId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * List Staff Users
   * List staff users using Filter with Pagination and Sorting with filter options on status, archive and role and search functionality on firstName, lastName and email,
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.status
   * @param data.archive
   * @param data.role
   * @param data.roleType
   * @param data.searchString
   * @param data.locationId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllUsers(
    data: GetAllUsersData = {},
  ): CancelablePromise<GetAllUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/user",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        status: data.status,
        archive: data.archive,
        role: data.role,
        roleType: data.roleType,
        searchString: data.searchString,
        locationId: data.locationId,
      },
    });
  }

  /**
   * Update Staff Users
   * Edit Staff User with editable fields as firstName, lastName, phone, roleType, role.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/user",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Staff User
   * Add a new Staff User into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static addUser(data: AddUserData): CancelablePromise<AddUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/user",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Change Avatar
   * Change user avatar
   * @param data The data for the request.
   * @param data.userUuid
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static changeAvatar3(
    data: ChangeAvatar3Data,
  ): CancelablePromise<ChangeAvatar3Response> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/change-avatar/{userUuid}",
      path: {
        userUuid: data.userUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Verify user
   * Verify user
   * @param data The data for the request.
   * @param data.email
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static verifyUser(
    data: VerifyUserData,
  ): CancelablePromise<VerifyUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/verify-user/{email}",
      path: {
        email: data.email,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Verify otp
   * Verify user otp
   * @param data The data for the request.
   * @param data.email
   * @param data.otp
   * @param data.linkType
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static verifyOtp(
    data: VerifyOtpData,
  ): CancelablePromise<VerifyOtpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/verify-otp/{linkType}/{email}/{otp}",
      path: {
        email: data.email,
        otp: data.otp,
        linkType: data.linkType,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Set/Reset Password
   * Set/Reset Password for User
   * @param data The data for the request.
   * @param data.linkType
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static setPassword(
    data: SetPasswordData,
  ): CancelablePromise<SetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/set-password/{linkType}",
      path: {
        linkType: data.linkType,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Resend otp
   * Resend otp
   * @param data The data for the request.
   * @param data.linkType
   * @param data.email
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static resendOtp(
    data: ResendOtpData,
  ): CancelablePromise<ResendOtpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/resend-otp/{linkType}/{email}",
      path: {
        linkType: data.linkType,
        email: data.email,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Logout
   * Invalidate active access tokens
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static logout(data: LogoutData): CancelablePromise<LogoutResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/logout",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Login
   * Get access token using Username and Password
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAccessToken(
    data: GetAccessTokenData,
  ): CancelablePromise<GetAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/login",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Change Password
   * Change Password for Logged-in User
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static changePassword(
    data: ChangePasswordData,
  ): CancelablePromise<ChangePasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/change-password",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.refreshToken
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAccessTokenFromRefreshToken(
    data: GetAccessTokenFromRefreshTokenData,
  ): CancelablePromise<GetAccessTokenFromRefreshTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/access-token",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        refreshToken: data.refreshToken,
      },
    });
  }

  /**
   * Staff User
   * Get Staff User by userUuid
   * @param data The data for the request.
   * @param data.userId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/user/{userId}",
      path: {
        userId: data.userId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * User Profile
   * Get Logged-in User Profile
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getProfile1(
    data: GetProfile1Data = {},
  ): CancelablePromise<GetProfile1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/profile",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class RolesAndPrivilegesControllerService {
  /**
   * Get all Roles with Privileges.
   * Get all Roles list with their Privileges
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllRoles(
    data: GetAllRolesData = {},
  ): CancelablePromise<GetAllRolesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/role",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Update Role
   * Update an existing Role
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateRole(
    data: UpdateRoleData,
  ): CancelablePromise<UpdateRoleResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/role",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Role
   * Add a new Role
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static addRole(data: AddRoleData): CancelablePromise<AddRoleResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/role",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get all Privileges.
   * Get all Privileges
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllPrivileges(
    data: GetAllPrivilegesData = {},
  ): CancelablePromise<GetAllPrivilegesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/role/privileges",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class ProviderControllerService {
  /**
   * Get all providers/Nurse
   * Get all providers/Nurse list with search option on firstName, lastName, npi and filter options on status, archive and state.
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.status
   * @param data.archive
   * @param data.state
   * @param data.role
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllProviders(
    data: GetAllProvidersData = {},
  ): CancelablePromise<GetAllProvidersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/provider",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        status: data.status,
        archive: data.archive,
        state: data.state,
        role: data.role,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update provider/Nurse
   * Edit Provider/Nurse with editable fields as firstName, lastName, phone, providerType, gender, npi, address, licensedStates
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateProvider(
    data: UpdateProviderData,
  ): CancelablePromise<UpdateProviderResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Provider/Nurse User
   * Add a new Provider/Nurse User into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createProvider(
    data: CreateProviderData,
  ): CancelablePromise<CreateProviderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/provider",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Archive/Unarchived Provider/Nurse
   * Change Provider/Nurse archive status to either archived or unarchived.
   * @param data The data for the request.
   * @param data.providerId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateProviderArchiveStatus(
    data: UpdateProviderArchiveStatusData,
  ): CancelablePromise<UpdateProviderArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider/{providerId}/archive-status/{status}",
      path: {
        providerId: data.providerId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Upload nurse introduction video
   * Upload nurse introduction video.
   * @param data The data for the request.
   * @param data.providerUuid
   * @param data.xTenantId
   * @param data.requestBody
   * @returns Response OK
   * @throws ApiError
   */
  public static uploadVideo(
    data: UploadVideoData,
  ): CancelablePromise<UploadVideoResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider/upload",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        providerUuid: data.providerUuid,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Change Avatar
   * Change provider avatar
   * @param data The data for the request.
   * @param data.providerUuid
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static changeAvatar(
    data: ChangeAvatarData,
  ): CancelablePromise<ChangeAvatarResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider/change-avatar/{providerUuid}",
      path: {
        providerUuid: data.providerUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get provider/Nurse by providerUuid.
   * Get provider/Nurse by providerUuid
   * @param data The data for the request.
   * @param data.providerUuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getProviderById(
    data: GetProviderByIdData,
  ): CancelablePromise<GetProviderByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/provider/{providerUuid}",
      path: {
        providerUuid: data.providerUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get provider/Nurse profile
   * Get provider/Nurse profile
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getProfile(
    data: GetProfileData = {},
  ): CancelablePromise<GetProfileResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/provider/profile",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Delete nurse introduction video
   * Delete nurse introduction video.
   * @param data The data for the request.
   * @param data.providerUuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static deleteVideo(
    data: DeleteVideoData,
  ): CancelablePromise<DeleteVideoResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/master/provider/video/{providerUuid}",
      path: {
        providerUuid: data.providerUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class ProviderGroupControllerService {
  /**
   * Get all provider groups.
   * Get all provider groups list for super admin
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.status
   * @param data.archive
   * @param data.state
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllProviderGroups(
    data: GetAllProviderGroupsData = {},
  ): CancelablePromise<GetAllProviderGroupsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/provider-group",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        status: data.status,
        archive: data.archive,
        state: data.state,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update Provider Group
   * Edit Provider Group with editable fields as phone, website, fax, description, address
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateProviderGroup(
    data: UpdateProviderGroupData,
  ): CancelablePromise<UpdateProviderGroupResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider-group",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add provider group
   * Add a new provider group into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createProviderGroup(
    data: CreateProviderGroupData,
  ): CancelablePromise<CreateProviderGroupResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/provider-group",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.uuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static syncDatabaseSchema(
    data: SyncDatabaseSchemaData,
  ): CancelablePromise<SyncDatabaseSchemaResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider-group/{uuid}/sync",
      path: {
        uuid: data.uuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Archive/Un-archive Provider Group
   * Change Provider Group  archive status to either archived or unarchived.
   * @param data The data for the request.
   * @param data.providerGroupId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateProviderGroupArchiveStatus(
    data: UpdateProviderGroupArchiveStatusData,
  ): CancelablePromise<UpdateProviderGroupArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider-group/{providerGroupId}/archive-status/{status}",
      path: {
        providerGroupId: data.providerGroupId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Change Avatar
   * Change Provider Group avatar
   * @param data The data for the request.
   * @param data.providerGroupId
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static changeAvatar1(
    data: ChangeAvatar1Data,
  ): CancelablePromise<ChangeAvatar1Response> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/provider-group/change-avatar/{providerGroupId}",
      path: {
        providerGroupId: data.providerGroupId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get provider group by providerGroupUuid.
   * Get provider group by providerGroupUuid
   * @param data The data for the request.
   * @param data.providerGroupId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getProviderGroupById(
    data: GetProviderGroupByIdData,
  ): CancelablePromise<GetProviderGroupByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/provider-group/{providerGroupId}",
      path: {
        providerGroupId: data.providerGroupId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class PatientControllerService {
  /**
   * Get all patient
   * Get all patient list with search option on firstName, lastName.
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.status
   * @param data.archive
   * @param data.searchString
   * @param data.name
   * @param data.mrn
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllPatient(
    data: GetAllPatientData = {},
  ): CancelablePromise<GetAllPatientResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        status: data.status,
        archive: data.archive,
        searchString: data.searchString,
        name: data.name,
        mrn: data.mrn,
      },
    });
  }

  /**
   * Update Patient User
   * Update  Patient User into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatient(
    data: UpdatePatientData,
  ): CancelablePromise<UpdatePatientResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Patient User
   * Add a new Patient User into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createPatient(
    data: CreatePatientData,
  ): CancelablePromise<CreatePatientResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Archive/Unarchived Patient
   * Change Patient archive status to either archived or unarchived.
   * @param data The data for the request.
   * @param data.patientId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatientArchiveStatus(
    data: UpdatePatientArchiveStatusData,
  ): CancelablePromise<UpdatePatientArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient/{patientId}/archive-status/{status}",
      path: {
        patientId: data.patientId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Change Avatar
   * Change patient avatar
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static changeAvatar2(
    data: ChangeAvatar2Data,
  ): CancelablePromise<ChangeAvatar2Response> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient/change-avatar/{patientUuid}",
      path: {
        patientUuid: data.patientUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Upload a CSV file
   * Uploads a CSV file for the specified category and title
   * @param data The data for the request.
   * @param data.formData
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static uploadFile(
    data: UploadFileData,
  ): CancelablePromise<UploadFileResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient/patient-upload",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
    });
  }

  /**
   * Get patient by patientUuid.
   * Get patient by patientUuid
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientById(
    data: GetPatientByIdData,
  ): CancelablePromise<GetPatientByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient/{patientUuid}",
      path: {
        patientUuid: data.patientUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get patient profile
   * Get patient profile
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getProfile2(
    data: GetProfile2Data = {},
  ): CancelablePromise<GetProfile2Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient/profile",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Download a template CSV file
   * Downloads a template CSV file based on the specified category
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns binary OK
   * @throws ApiError
   */
  public static downloadTemplate(
    data: DownloadTemplateData = {},
  ): CancelablePromise<DownloadTemplateResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient/patient-template",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class PatientVitalControllerService {
  /**
   * Get All Patient Vitals
   * Get all Patient Vital records with search and filter options
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sort
   * @param data.vitalName
   * @param data.startDate
   * @param data.endDate
   * @param data.timeFilter
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientVitals1(
    data: GetPatientVitals1Data,
  ): CancelablePromise<GetPatientVitals1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-vital",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sort: data.sort,
        patientUuid: data.patientUuid,
        vitalName: data.vitalName,
        startDate: data.startDate,
        endDate: data.endDate,
        timeFilter: data.timeFilter,
      },
    });
  }

  /**
   * Update Patient Note Vital
   * Update a new patient Note vital record into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatientVital(
    data: UpdatePatientVitalData,
  ): CancelablePromise<UpdatePatientVitalResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient-vital",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Patient Vital
   * Add a new patient vital record into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createPatientVital(
    data: CreatePatientVitalData,
  ): CancelablePromise<CreatePatientVitalResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient-vital",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add List of Patient Vital
   * Add List of patient vital record into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createListPatientVital(
    data: CreateListPatientVitalData,
  ): CancelablePromise<CreateListPatientVitalResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient-vital/list",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get Patient Vital by ID
   * Retrieve a Patient Vital record by its unique ID
   * @param data The data for the request.
   * @param data.patientVitalId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientVitalById(
    data: GetPatientVitalByIdData,
  ): CancelablePromise<GetPatientVitalByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-vital/{patientVitalId}",
      path: {
        patientVitalId: data.patientVitalId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get All Latest Patient Vitals
   * Get All Patient Latest records with search and filter options
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientLatestVitals(
    data: GetPatientLatestVitalsData,
  ): CancelablePromise<GetPatientLatestVitalsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-vital/latest",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        patientUuid: data.patientUuid,
      },
    });
  }
}

export class PatientMedicationControllerService {
  /**
   * Get all Patient Medication.
   * Get all Patient Medication list
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sort
   * @param data.status
   * @param data.archive
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientMedication(
    data: GetPatientMedicationData,
  ): CancelablePromise<GetPatientMedicationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-medication",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        patientUuid: data.patientUuid,
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sort: data.sort,
        status: data.status,
        archive: data.archive,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update Patient Medication
   * Update an existing Patient Medication
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatientMedication(
    data: UpdatePatientMedicationData,
  ): CancelablePromise<UpdatePatientMedicationResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient-medication",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Patient Medication
   * Add a new patient medication into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createPatientMedication(
    data: CreatePatientMedicationData,
  ): CancelablePromise<CreatePatientMedicationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient-medication",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Archive Patient Medication
   * Archive a Patient Medication by its ID
   * @param data The data for the request.
   * @param data.patientMedicationId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static deletePatientMedicationId(
    data: DeletePatientMedicationIdData,
  ): CancelablePromise<DeletePatientMedicationIdResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient-medication/archive-status/{patientMedicationId}",
      path: {
        patientMedicationId: data.patientMedicationId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        status: data.status,
      },
    });
  }

  /**
   * Get Patient Medication by ID
   * Retrieve a Patient Medication by its unique ID
   * @param data The data for the request.
   * @param data.patientMedicationId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientMedicationById(
    data: GetPatientMedicationByIdData,
  ): CancelablePromise<GetPatientMedicationByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-medication/{patientMedicationId}",
      path: {
        patientMedicationId: data.patientMedicationId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class ConsentFormControllerService {
  /**
   * Patient Consent status
   * Change Patient Consent status to either true or false.
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatientConsentStatus(
    data: UpdatePatientConsentStatusData,
  ): CancelablePromise<UpdatePatientConsentStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient-consent-form/{patientUuid}/status/{status}",
      path: {
        patientUuid: data.patientUuid,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get all Consent forms.
   * Get all Consent forms list filter by status and archive and search functionality by consent name
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.status
   * @param data.archive
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllConsentFormTemplate(
    data: GetAllConsentFormTemplateData = {},
  ): CancelablePromise<GetAllConsentFormTemplateResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/consent-form",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        status: data.status,
        archive: data.archive,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update Consent form
   * Update a consent forms into the system.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateConsentForms(
    data: UpdateConsentFormsData,
  ): CancelablePromise<UpdateConsentFormsResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/consent-form",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Consent form
   * Add a new Consent forms into the system.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createConsentForms(
    data: CreateConsentFormsData,
  ): CancelablePromise<CreateConsentFormsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/consent-form",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Archive/Un-archive Consent Form
   * Change Consent Form  archive status to either archived or unarchived.
   * @param data The data for the request.
   * @param data.consentFormId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateConsentFormArchiveStatus(
    data: UpdateConsentFormArchiveStatusData,
  ): CancelablePromise<UpdateConsentFormArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/consent-form/{consentFormId}/archive-status/{status}",
      path: {
        consentFormId: data.consentFormId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get all Patient Consent forms.
   * Get all PatientConsent forms list
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllPatientConsentForm(
    data: GetAllPatientConsentFormData,
  ): CancelablePromise<GetAllPatientConsentFormResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-consent-form",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        patientUuid: data.patientUuid,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Add Patient Consent
   * Add a Patient Consent forms into the system.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static addPatientConsent(
    data: AddPatientConsentData,
  ): CancelablePromise<AddPatientConsentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient-consent-form",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get Signed Patient Consent form.
   * Get Signed PatientConsent forms Details
   * @param data The data for the request.
   * @param data.patientConsentFormUuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientConsentFormById(
    data: GetPatientConsentFormByIdData,
  ): CancelablePromise<GetPatientConsentFormByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-consent-form/{patientConsentFormUuid}",
      path: {
        patientConsentFormUuid: data.patientConsentFormUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get Consent form by consentFormId.
   * Get Consent form by consentFormUuid.
   * @param data The data for the request.
   * @param data.consentFormId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getConsentFormId(
    data: GetConsentFormIdData,
  ): CancelablePromise<GetConsentFormIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/consent-form/{consentFormId}",
      path: {
        consentFormId: data.consentFormId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class PatientAllergyControllerService {
  /**
   * Get all Patient Allergy.
   * Get all Patient Allergy list with search option on name, patientId and filter options on active, archive.
   * @param data The data for the request.
   * @param data.patientUuid
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sort
   * @param data.status
   * @param data.archive
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientAllergy(
    data: GetPatientAllergyData,
  ): CancelablePromise<GetPatientAllergyResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-allergy",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sort: data.sort,
        patientUuid: data.patientUuid,
        status: data.status,
        archive: data.archive,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update Patient Allergy
   * Update an existing Patient Allergy
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatientAllergy(
    data: UpdatePatientAllergyData,
  ): CancelablePromise<UpdatePatientAllergyResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient-allergy",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Patient Allergy
   * Add a new patient allergy into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createPatientAllergy(
    data: CreatePatientAllergyData,
  ): CancelablePromise<CreatePatientAllergyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/patient-allergy",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Archive Patient Allergy
   * Archive a Patient Allergy by its ID
   * @param data The data for the request.
   * @param data.patientAllergyId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updatePatientAllergyArchiveStatus(
    data: UpdatePatientAllergyArchiveStatusData,
  ): CancelablePromise<UpdatePatientAllergyArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/patient-allergy/{patientAllergyId}/archive-status/{status}",
      path: {
        patientAllergyId: data.patientAllergyId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get Patient Allergy by ID
   * Retrieve a Patient Allergy by its unique ID
   * @param data The data for the request.
   * @param data.patientAllergyId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientAllergyById(
    data: GetPatientAllergyByIdData,
  ): CancelablePromise<GetPatientAllergyByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/patient-allergy/{patientAllergyId}",
      path: {
        patientAllergyId: data.patientAllergyId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class MedicalCodeControllerService {
  /**
   * Get all MedicalCode.
   * Get all MedicalCodes list for super admin with search option on name, deptId and filter options on active, archive.
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sort
   * @param data.type
   * @param data.active
   * @param data.archive
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getMedicalCodes(
    data: GetMedicalCodesData = {},
  ): CancelablePromise<GetMedicalCodesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/medical-codes",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sort: data.sort,
        type: data.type,
        active: data.active,
        archive: data.archive,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update MedicalCode
   * Update an existing MedicalCode
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateMedicalCode(
    data: UpdateMedicalCodeData,
  ): CancelablePromise<UpdateMedicalCodeResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/medical-codes",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add MedicalCode
   * Add a new MedicalCode into the system
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createMedicalCode(
    data: CreateMedicalCodeData,
  ): CancelablePromise<CreateMedicalCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/medical-codes",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Update MedicalCode Status
   * Update the status of a MedicalCode by its ID
   * @param data The data for the request.
   * @param data.medicalCodeId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateMedicalCodeStatus(
    data: UpdateMedicalCodeStatusData,
  ): CancelablePromise<UpdateMedicalCodeStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/medical-codes/{medicalCodeId}/status/{status}",
      path: {
        medicalCodeId: data.medicalCodeId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Archive MedicalCode
   * Archive a MedicalCode by its ID
   * @param data The data for the request.
   * @param data.medicalCodeId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateMedicalCodeArchiveStatus(
    data: UpdateMedicalCodeArchiveStatusData,
  ): CancelablePromise<UpdateMedicalCodeArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/medical-codes/{medicalCodeId}/archive-status/{status}",
      path: {
        medicalCodeId: data.medicalCodeId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get MedicalCode by ID
   * Retrieve a MedicalCode by its unique ID
   * @param data The data for the request.
   * @param data.medicalCodeId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getMedicalCodeById(
    data: GetMedicalCodeByIdData,
  ): CancelablePromise<GetMedicalCodeByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/medical-codes/{medicalCodeId}",
      path: {
        medicalCodeId: data.medicalCodeId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class LocationControllerService {
  /**
   * Get all Locations.
   * Get all Locations list for super admin with search option on name, locationId and filter options on active, archive and physical addresses state.
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.status
   * @param data.archive
   * @param data.state
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllLocations(
    data: GetAllLocationsData = {},
  ): CancelablePromise<GetAllLocationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/location",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        status: data.status,
        archive: data.archive,
        state: data.state,
        searchString: data.searchString,
      },
    });
  }

  /**
   * Update Location
   * Edit Location with editable fields as
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateLocation(
    data: UpdateLocationData,
  ): CancelablePromise<UpdateLocationResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/location",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Add Location
   * Add a new Location into the system.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static createLocation(
    data: CreateLocationData,
  ): CancelablePromise<CreateLocationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/location",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Archive/Un-archive Location
   * Change Location  archive status to either archived or unarchived.
   * @param data The data for the request.
   * @param data.locationId
   * @param data.status
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static updateLocationArchiveStatus(
    data: UpdateLocationArchiveStatusData,
  ): CancelablePromise<UpdateLocationArchiveStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/master/location/{locationId}/archive-status/{status}",
      path: {
        locationId: data.locationId,
        status: data.status,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Get Location by locationUuid.
   * Get Location by locationUuid.
   * @param data The data for the request.
   * @param data.locationId
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getLocationById(
    data: GetLocationByIdData,
  ): CancelablePromise<GetLocationByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/location/{locationId}",
      path: {
        locationId: data.locationId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class AvailabilityControllerService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static setProviderAvailabilitySetting(
    data: SetProviderAvailabilitySettingData,
  ): CancelablePromise<SetProviderAvailabilitySettingResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/master/provider/availability-setting",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.providerUuid
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getProviderAvailabilitySetting(
    data: GetProviderAvailabilitySettingData,
  ): CancelablePromise<GetProviderAvailabilitySettingResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/provider/{providerUuid}/availability-setting",
      path: {
        providerUuid: data.providerUuid,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}

export class VitalControllerService {
  /**
   * Get Vitals
   * Get all Vital records with search by name
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sort
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getPatientVitals(
    data: GetPatientVitalsData = {},
  ): CancelablePromise<GetPatientVitalsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/vital",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sort: data.sort,
        searchString: data.searchString,
      },
    });
  }
}

export class LicenseStateControllerService {
  /**
   * @param data The data for the request.
   * @param data.page
   * @param data.size
   * @param data.sortBy
   * @param data.sortDirection
   * @param data.searchString
   * @param data.xTenantId
   * @returns Response OK
   * @throws ApiError
   */
  public static getAllLicensedStates(
    data: GetAllLicensedStatesData = {},
  ): CancelablePromise<GetAllLicensedStatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/license-state",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
      query: {
        page: data.page,
        size: data.size,
        sortBy: data.sortBy,
        sortDirection: data.sortDirection,
        searchString: data.searchString,
      },
    });
  }
}

export class EhrControllerService {
  /**
   * Practitioner
   * Get practitioner by practitionerId
   * @param data The data for the request.
   * @param data.practitionerId
   * @param data.xTenantId
   * @returns Provider OK
   * @throws ApiError
   */
  public static getPractitionerByProviderId(
    data: GetPractitionerByProviderIdData,
  ): CancelablePromise<GetPractitionerByProviderIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/ehr-practitioner/{practitionerId}",
      path: {
        practitionerId: data.practitionerId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Organization
   * Get organization by practiceId
   * @param data The data for the request.
   * @param data.practiceId
   * @param data.xTenantId
   * @returns ProviderGroup OK
   * @throws ApiError
   */
  public static getOrganizationByPracticeId(
    data: GetOrganizationByPracticeIdData,
  ): CancelablePromise<GetOrganizationByPracticeIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/ehr-organization/{practiceId}",
      path: {
        practiceId: data.practiceId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Location
   * Get location by locationId
   * @param data The data for the request.
   * @param data.locationId
   * @param data.xTenantId
   * @returns Location OK
   * @throws ApiError
   */
  public static getLocationByLocationId(
    data: GetLocationByLocationIdData,
  ): CancelablePromise<GetLocationByLocationIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/ehr-location/{locationId}",
      path: {
        locationId: data.locationId,
      },
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }

  /**
   * Authorization
   * Get access token
   * @param data The data for the request.
   * @param data.xTenantId
   * @returns EhrAccessToken OK
   * @throws ApiError
   */
  public static getAccessToken1(
    data: GetAccessToken1Data = {},
  ): CancelablePromise<GetAccessToken1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/master/ehr-access-token",
      headers: {
        "X-TENANT-ID": data.xTenantId,
      },
    });
  }
}
